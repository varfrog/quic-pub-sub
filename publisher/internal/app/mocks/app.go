// Code generated by MockGen. DO NOT EDIT.
// Source: app.go

// Package mock_app is a generated GoMock package.
package mock_app

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMessageRecipient is a mock of MessageRecipient interface.
type MockMessageRecipient struct {
	ctrl     *gomock.Controller
	recorder *MockMessageRecipientMockRecorder
}

// MockMessageRecipientMockRecorder is the mock recorder for MockMessageRecipient.
type MockMessageRecipientMockRecorder struct {
	mock *MockMessageRecipient
}

// NewMockMessageRecipient creates a new mock instance.
func NewMockMessageRecipient(ctrl *gomock.Controller) *MockMessageRecipient {
	mock := &MockMessageRecipient{ctrl: ctrl}
	mock.recorder = &MockMessageRecipientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageRecipient) EXPECT() *MockMessageRecipientMockRecorder {
	return m.recorder
}

// SendMessageToRecipient mocks base method.
func (m *MockMessageRecipient) SendMessageToRecipient(message []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessageToRecipient", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessageToRecipient indicates an expected call of SendMessageToRecipient.
func (mr *MockMessageRecipientMockRecorder) SendMessageToRecipient(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessageToRecipient", reflect.TypeOf((*MockMessageRecipient)(nil).SendMessageToRecipient), message)
}

// MockMessageProvider is a mock of MessageProvider interface.
type MockMessageProvider struct {
	ctrl     *gomock.Controller
	recorder *MockMessageProviderMockRecorder
}

// MockMessageProviderMockRecorder is the mock recorder for MockMessageProvider.
type MockMessageProviderMockRecorder struct {
	mock *MockMessageProvider
}

// NewMockMessageProvider creates a new mock instance.
func NewMockMessageProvider(ctrl *gomock.Controller) *MockMessageProvider {
	mock := &MockMessageProvider{ctrl: ctrl}
	mock.recorder = &MockMessageProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageProvider) EXPECT() *MockMessageProviderMockRecorder {
	return m.recorder
}

// GetMessage mocks base method.
func (m *MockMessageProvider) GetMessage() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessage")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessage indicates an expected call of GetMessage.
func (mr *MockMessageProviderMockRecorder) GetMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessage", reflect.TypeOf((*MockMessageProvider)(nil).GetMessage))
}
