// Code generated by MockGen. DO NOT EDIT.
// Source: connectors.go

// Package mock_app is a generated GoMock package.
package mock_app

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPublisher is a mock of Publisher interface.
type MockPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherMockRecorder
}

// MockPublisherMockRecorder is the mock recorder for MockPublisher.
type MockPublisherMockRecorder struct {
	mock *MockPublisher
}

// NewMockPublisher creates a new mock instance.
func NewMockPublisher(ctrl *gomock.Controller) *MockPublisher {
	mock := &MockPublisher{ctrl: ctrl}
	mock.recorder = &MockPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublisher) EXPECT() *MockPublisherMockRecorder {
	return m.recorder
}

// GetID mocks base method.
func (m *MockPublisher) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockPublisherMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockPublisher)(nil).GetID))
}

// NotifyExistsSubscriber mocks base method.
func (m *MockPublisher) NotifyExistsSubscriber() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyExistsSubscriber")
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyExistsSubscriber indicates an expected call of NotifyExistsSubscriber.
func (mr *MockPublisherMockRecorder) NotifyExistsSubscriber() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyExistsSubscriber", reflect.TypeOf((*MockPublisher)(nil).NotifyExistsSubscriber))
}

// NotifyNoSubscribers mocks base method.
func (m *MockPublisher) NotifyNoSubscribers() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyNoSubscribers")
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyNoSubscribers indicates an expected call of NotifyNoSubscribers.
func (mr *MockPublisherMockRecorder) NotifyNoSubscribers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyNoSubscribers", reflect.TypeOf((*MockPublisher)(nil).NotifyNoSubscribers))
}

// MockSubscriber is a mock of Subscriber interface.
type MockSubscriber struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriberMockRecorder
}

// MockSubscriberMockRecorder is the mock recorder for MockSubscriber.
type MockSubscriberMockRecorder struct {
	mock *MockSubscriber
}

// NewMockSubscriber creates a new mock instance.
func NewMockSubscriber(ctrl *gomock.Controller) *MockSubscriber {
	mock := &MockSubscriber{ctrl: ctrl}
	mock.recorder = &MockSubscriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriber) EXPECT() *MockSubscriberMockRecorder {
	return m.recorder
}

// GetID mocks base method.
func (m *MockSubscriber) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockSubscriberMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockSubscriber)(nil).GetID))
}

// SendMessageToSubscriber mocks base method.
func (m *MockSubscriber) SendMessageToSubscriber(message []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessageToSubscriber", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessageToSubscriber indicates an expected call of SendMessageToSubscriber.
func (mr *MockSubscriberMockRecorder) SendMessageToSubscriber(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessageToSubscriber", reflect.TypeOf((*MockSubscriber)(nil).SendMessageToSubscriber), message)
}
